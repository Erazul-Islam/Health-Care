// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String     @id @default(uuid())
  email              String     @unique
  password           String
  role               UserRole
  needPasswordChange Boolean    @default(true)
  status             UserStatus @default(ACTIVE)
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  admin              Admin?

  @@map("users")
}

model Admin {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique
  profilePhoto  String?
  contactNumber String?
  isDeleted     Boolean  @default(false)
  user          User     @relation(fields: [email], references: [email])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("admins")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  DOCTOR
  PATIENT
}

enum UserStatus {
  ACTIVE
  BLOCKED
}

model Book {
  bookId          String         @id @default(uuid())
  title           String
  genre           String
  publishedYear   Int
  totalCopies     Int
  availableCopies Int
  borrowRecords   BorrowRecord[]

  @@map("books")
}

model Member {
  memberId       String         @id @default(uuid())
  name           String
  email          String         @unique
  phone          String
  membershipDate DateTime       @default(now())
  borrowRecords  BorrowRecord[]

  @@map("members")
}

model BorrowRecord {
  borrowId   String    @id @default(uuid())
  borrowDate DateTime  @default(now())
  returnDate DateTime?
  bookId     String
  memberId   String
  book       Book      @relation(fields: [bookId], references: [bookId])
  member     Member    @relation(fields: [memberId], references: [memberId])
}
